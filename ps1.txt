Stat243 - Problem Set 1 
Mengling Liu

2. Apricots problem
(a) Based on area harvested, determine the five countries using the most land to produce apricots
#Download the data for apricots 
#First download the data from website and rename it as apricots.zip, unzip the file and rename it to apricotsdata.csv as the original downloaded filename will change corresponding to the time frame 
##code##
curl -o apricots.zip "http://data.un.org/Handlers/DownloadHandler.ashx?DataFilter=itemCode:526&DataMartId=FAO&Format=csv&c=2,3,4,5,6,7&s=countryName:asc,elementCode:asc,year:desc"
unzip -p apricots.zip > apricotsdata.csv

#Extract data for individual countries into one file, and for regions of the world into another
#If extract unique the country or area column, we discovered that area will have a "+" appending to it in the end, so separate individual countries with regions of world by using this criteria 
#Extract headline out and append to both of the country file and region file as first row
##code##
head -n 1 apricotsdata.csv > apricots_headline1.csv
grep "+" apricotsdata.csv >> apricots_headline1.csv 
cat apricots_headline1.csv> apricots_region.csv
grep -v "+" apricotsdata.csv > apricots_country.csv

#Subset the country level data to the year 2005 and based on area harvested determine the countries using the most land to produce apricots
#As "Iran, Islamic Republic of" has a ', ' in between Iran and Islamic so delimiter under cut may take this ',' wrongly as an additional field, so use sed to get rid of the ', ' in between country names
#Use "awk" to extract data from year 2005 (column 4) with area harvested (column 3)
#Take all the apprentices sign out so that to turn Value column to numerical values, then sort from big to small according to the Value column (column 6)
#Cut out the country or region column and take the top five countries using the most land to produce apricots
##Answer: Turkey, Iran, Pakistan, Uzbekistan, Algeria
##code##
sed 's/, / /g' apricots_country.csv | awk -F',' '$4 ~ "2005" && $3 ~ "Area Harvested"'| sed 's/"//g' | sort -n -t',' -k6 -r | cut -d',' -f1 | head -n 5
echo "Year 2005: $(sed 's/, / /g' apricots_country.csv | awk -F',' '$4 ~ "2005" && $3 ~ "Area Harvested"'| sed 's/"//g' | sort -n -t',' -k6 -r | cut -d',' -f1 | head -n 5)"

#Use the logic above to automate the analysis for 1965, 1975, 1985, 1995, and 2005
#We discovered that rankings for different country change
##Answer:
Year 1965: USSR, Turkey, United States of America, Spain, Tunisia
Year 1975: USSR, Turkey, Spain, Tunisia, Italy
Year 1985: Turkey, USSR, Spain, Iran Islamic Republic of, Tunisia
Year 1995: Turkey, Iran Islamic Republic of, Spain, Ukraine, Tunisia
Year 2005: Turkey, Iran Islamic Republic of, Pakistan, Uzbekistan, Algeria
##code##
for ((i=1965; i<=2005; i+=10))
do
   echo "Year ${i}:"
   echo $(sed 's/, / /g' apricots_country.csv | awk -F',' -v i=$i '$4 ~ i && $3 ~ "Area Harvested"'| sed 's/"//g'| sort -n -t',' -k6 -r | cut -d',' -f1 | head -n 5)
   echo -e "\n"
done

(b) Write a bash function that takes as input a single item code and prints out to screen the data stored in the CSV file
#If the argument input is more than one, then function will return message that "Wrong number of arguments, pls enter only one argument"
#If the argument input equals to "-h", then output the help information "Please input a three digit single item code composed of integers from 0 to 9"
#If call the function with "myfun xxx", if xxx is a valid item code i.e. 526 (myfun 526), then the function will print out the data to screen in a csv file
#If xxx is not a valid item code, as I discovered that file will still be downloaded but only the headline, so i filter them by checking the size i.e. wc of the file. 
#If the byte count equals 86, then it should send an error message to input another valid code
##code##
function myfun() {
  if [ "$#" != 1 ]
    then echo "Wrong number of arguments, pls enter only one argument"
    return
  fi
  if [ "$1" != "-h" ]
   then 
      code=$1
      curl -o ${code}.zip "http://data.un.org/Handlers/DownloadHandler.ashx?DataFilter=itemCode:${code}&DataMartId=FAO&Format=csv&c=2,3,4,5,6,7&s=countryName:asc,elementCode:asc,year:desc" 
      unzip -p ${code}.zip > ${code}.csv  
      result=($(wc ${code}.csv))
      characters=${result[2]}
         if [ $characters == 86 ]
         then
            echo "${code}.csv file doesn't exist, pls enter a valid single item code"   
         else
            less ${code}.csv         
         fi 
   else
      echo "Please input a three digit single item code composed of integers from 0 to 9"
   fi
}


3. Downloading txt files from National Climate Data Center
#First download the html file for the URL using wget
#Then process the html using tools like grep to pull out the hyperlinks referring to .txt files 
#Then download each file individually by constructing the necessary URL to get that file
##code##
wget "http://www1.ncdc.noaa.gov/pub/data/ghcn/daily/"
grep -o "href=\".*\.txt\"" index.html | cut -d'"' -f2 > URL.txt
wordcount=($(wc URL.txt))
numofline=${wordcount[1]} 
URL1="http://www1.ncdc.noaa.gov/pub/data/ghcn/daily/"

for ((i=1; i<=$numofline; i++))
do
    URL2=$(sed -n ${i}p URL.txt) 
    URL=$URL1$URL2
    wget $URL
    echo $URL2 
done



4. Embedding R code and output in a PDF or HTML document

\documentclass{article}
\begin{document}
\SweaveOpts{concordance=TRUE}
\title{Stat243 Problem Set 1 \\ Question 4}
\author{Mengling Liu}
\date{Sept 2017}

\maketitle

The height of the water level in Lake Huron fluctuates over time. Here I ¡¦analyze¡¦ the variation using R. I
show a histogram of the lake levels for the period \Sexpr{attributes(LakeHuron)$tsp[1]} to \Sexpr{attributes(LakeHuron)$tsp[2]}.

<<plots,fig=TRUE, fig.width=8>>=
hist(LakeHuron)
@

<<my-chunck,eval=TRUE>>=
lowHi <- c(which.min(LakeHuron), which.max(LakeHuron))
yearExtrema <- attributes(LakeHuron)$tsp[1]-1 + lowHi
@

\end{document}
























